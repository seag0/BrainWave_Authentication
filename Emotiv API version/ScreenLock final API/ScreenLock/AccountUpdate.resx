<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        H//gAB//4AA///wAP///4D//
</value>
  </data>
</root>